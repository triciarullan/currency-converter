//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `btn_receive`.
    static let btn_receive = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_receive")
    /// Image `btn_sell`.
    static let btn_sell = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_sell")
    /// Image `icon_drop_down`.
    static let icon_drop_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_drop_down")
    
    /// `UIImage(named: "btn_receive", bundle: ..., traitCollection: ...)`
    static func btn_receive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_receive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_sell", bundle: ..., traitCollection: ...)`
    static func btn_sell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_sell, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_drop_down", bundle: ..., traitCollection: ...)`
    static func icon_drop_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_drop_down, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `ConverterReceiveTableViewCell`.
    static let converterReceiveTableViewCell = _R.nib._ConverterReceiveTableViewCell()
    /// Nib `ConverterSellTableViewCell`.
    static let converterSellTableViewCell = _R.nib._ConverterSellTableViewCell()
    /// Nib `CurrencyBalanceCollectionViewCell`.
    static let currencyBalanceCollectionViewCell = _R.nib._CurrencyBalanceCollectionViewCell()
    
    /// `UINib(name: "ConverterReceiveTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.converterReceiveTableViewCell) instead")
    static func converterReceiveTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.converterReceiveTableViewCell)
    }
    
    /// `UINib(name: "ConverterSellTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.converterSellTableViewCell) instead")
    static func converterSellTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.converterSellTableViewCell)
    }
    
    /// `UINib(name: "CurrencyBalanceCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.currencyBalanceCollectionViewCell) instead")
    static func currencyBalanceCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.currencyBalanceCollectionViewCell)
    }
    
    static func converterReceiveTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConverterReceiveTableViewCell? {
      return R.nib.converterReceiveTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConverterReceiveTableViewCell
    }
    
    static func converterSellTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConverterSellTableViewCell? {
      return R.nib.converterSellTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConverterSellTableViewCell
    }
    
    static func currencyBalanceCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrencyBalanceCollectionViewCell? {
      return R.nib.currencyBalanceCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrencyBalanceCollectionViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CurrencyBalanceCollectionViewCell`.
    static let currencyBalanceCollectionViewCell: Rswift.ReuseIdentifier<CurrencyBalanceCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "CurrencyBalanceCollectionViewCell")
    /// Reuse identifier `converterReceiveTableViewCell`.
    static let converterReceiveTableViewCell: Rswift.ReuseIdentifier<ConverterReceiveTableViewCell> = Rswift.ReuseIdentifier(identifier: "converterReceiveTableViewCell")
    /// Reuse identifier `converterSellTableViewCell`.
    static let converterSellTableViewCell: Rswift.ReuseIdentifier<ConverterSellTableViewCell> = Rswift.ReuseIdentifier(identifier: "converterSellTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 10 localization keys.
    struct localizable {
      /// Value: Cancel
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Currency Converted
      static let currencyConverted = Rswift.StringResource(key: "Currency Converted", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Currency Converter
      static let currencyConverter = Rswift.StringResource(key: "Currency Converter", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Done
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please try again
      static let pleaseTryAgain = Rswift.StringResource(key: "Please try again", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You cannot convert the same currency. Please try again.
      static let youCannotConvertTheSameCurrencyPleaseTryAgain = Rswift.StringResource(key: "You cannot convert the same currency. Please try again.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have successfully converted %@ to %@. Commission Fee is %@.Kindly check your new balance.
      static let youHaveSuccessfullyConvertedToCommissionFeeIsKindlyCheckYourNewBalance = Rswift.StringResource(key: "You have successfully converted %@ to %@. Commission Fee is %@.Kindly check your new balance.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You have successfully converted %@ to %@. Kindly check your new balance.
      static let youHaveSuccessfullyConvertedToKindlyCheckYourNewBalance = Rswift.StringResource(key: "You have successfully converted %@ to %@. Kindly check your new balance.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your amount to sell is invalid. Please try again.
      static let yourAmountToSellIsInvalidPleaseTryAgain = Rswift.StringResource(key: "Your amount to sell is invalid. Please try again.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your balance is insufficient. Please try again.
      static let yourBalanceIsInsufficientPleaseTryAgain = Rswift.StringResource(key: "Your balance is insufficient. Please try again.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Cancel
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Currency Converted
      static func currencyConverted(_: Void = ()) -> String {
        return NSLocalizedString("Currency Converted", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Currency Converter
      static func currencyConverter(_: Void = ()) -> String {
        return NSLocalizedString("Currency Converter", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Done
      static func done(_: Void = ()) -> String {
        return NSLocalizedString("Done", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please try again
      static func pleaseTryAgain(_: Void = ()) -> String {
        return NSLocalizedString("Please try again", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You cannot convert the same currency. Please try again.
      static func youCannotConvertTheSameCurrencyPleaseTryAgain(_: Void = ()) -> String {
        return NSLocalizedString("You cannot convert the same currency. Please try again.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You have successfully converted %@ to %@. Commission Fee is %@.Kindly check your new balance.
      static func youHaveSuccessfullyConvertedToCommissionFeeIsKindlyCheckYourNewBalance(_ value1: String, _ value2: String, _ value3: String) -> String {
        return String(format: NSLocalizedString("You have successfully converted %@ to %@. Commission Fee is %@.Kindly check your new balance.", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// Value: You have successfully converted %@ to %@. Kindly check your new balance.
      static func youHaveSuccessfullyConvertedToKindlyCheckYourNewBalance(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("You have successfully converted %@ to %@. Kindly check your new balance.", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: Your amount to sell is invalid. Please try again.
      static func yourAmountToSellIsInvalidPleaseTryAgain(_: Void = ()) -> String {
        return NSLocalizedString("Your amount to sell is invalid. Please try again.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your balance is insufficient. Please try again.
      static func yourBalanceIsInsufficientPleaseTryAgain(_: Void = ()) -> String {
        return NSLocalizedString("Your balance is insufficient. Please try again.", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ConverterReceiveTableViewCell.validate()
      try _ConverterSellTableViewCell.validate()
    }
    
    struct _ConverterReceiveTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ConverterReceiveTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "converterReceiveTableViewCell"
      let name = "ConverterReceiveTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConverterReceiveTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConverterReceiveTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_receive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_receive' is used in nib 'ConverterReceiveTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_drop_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_drop_down' is used in nib 'ConverterReceiveTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ConverterSellTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ConverterSellTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "converterSellTableViewCell"
      let name = "ConverterSellTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConverterSellTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConverterSellTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_sell", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_sell' is used in nib 'ConverterSellTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_drop_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_drop_down' is used in nib 'ConverterSellTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CurrencyBalanceCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CurrencyBalanceCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "CurrencyBalanceCollectionViewCell"
      let name = "CurrencyBalanceCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrencyBalanceCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrencyBalanceCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
